using Microsoft.Extensions.Logging;
using RpaWinUiComponentsPackage.AdvancedWinUiLogger.Internal.Infrastructure.Services;
using RpaWinUiComponentsPackage.AdvancedWinUiLogger.Internal.Configuration;
using RpaWinUiComponentsPackage.AdvancedWinUiDataGrid.Internal.Domain.ValueObjects.Core;

// CLEAN API DESIGN - Single namespace, single using statement
namespace RpaWinUiComponentsPackage.AdvancedWinUiLogger;

/// <summary>
/// üöÄ PROFESSIONAL ENTERPRISE LOGGER - Clean API Facade pre File-Only Logging
/// 
/// üéØ HLAVN√â CHARAKTERISTIKY:
/// ‚úÖ SINGLE USING: using RpaWinUiComponentsPackage.AdvancedWinUiLogger;
/// ‚úÖ FILE-ONLY LOGGING: BEZ UI komponentov - ƒçisto file-based logging syst√©m
/// ‚úÖ JEDIN√Å API MET√ìDA: LoggerAPI.CreateFileLogger() - simplifikovan√Ω entry point
/// ‚úÖ SIZE-BASED ROTATION: Automatick√° rot√°cia s√∫borov na z√°klade veƒækosti
/// ‚úÖ MICROSOFT.EXTENSIONS.LOGGING.ABSTRACTIONS: Bezprobl√©mov√° integr√°cia s existuj√∫cimi syst√©mami
/// ‚úÖ HIGH PERFORMANCE: Async logging s batch zapisovan√≠m pre performance
/// ‚úÖ FAIL-SAFE DESIGN: Funguje aj bez external loggera - ≈æiadne crashes
/// 
/// üìÅ ≈†TRUKT√öRA S√öBOROV√âHO SYST√âMU:
/// Vytv√°raj√∫ sa s√∫bory v nasleduj√∫com form√°te:
/// - MyApp.log          (aktu√°lny log s√∫bor, rastie dok√Ωm nedosiahne limit)
/// - MyApp_1.log        (prv√Ω rotovan√Ω s√∫bor po dosiahnut√≠ limitu)
/// - MyApp_2.log        (druh√Ω rotovan√Ω s√∫bor)
/// - ...
/// 
/// üîÑ ROTAƒåN√ù MECHANIZMUS:
/// 1. Aktu√°lny s√∫bor (MyApp.log) rastie poƒças zapisovania
/// 2. Keƒè dosiahne maxFileSizeMB limit, s√∫bor sa uzavrie
/// 3. MyApp.log sa premenuje na MyApp_1.log (existuj√∫ce ƒç√≠slovan√© s√∫bory sa posun√∫)
/// 4. Vytvor√≠ sa nov√Ω MyApp.log pre pokraƒçovanie zapisovania
/// 5. Ak je maxFileSizeMB = null, s√∫bor rastie neobmedzene (≈æiadna rot√°cia)
/// 
/// üí° USAGE PATTERN - COMPLETE EXAMPLE:
/// 
/// // üìã Z√ÅKLADN√â POU≈ΩITIE S ROT√ÅCIOU:
/// var fileLogger = LoggerAPI.CreateFileLogger(
///     externalLogger: myAppLogger,    // Nullable - m√¥≈æe by≈• null, ≈æiadny crash
///     logDirectory: @"C:\MyApp\Logs", // Adres√°r sa vytvor√≠ ak neexistuje
///     baseFileName: "MyApp",          // Bez pr√≠pony - prid√° sa automaticky .log
///     maxFileSizeMB: 10);            // Rot√°cia ka≈æd√Ωch 10MB
/// 
/// // üìã POU≈ΩITIE BEZ ROT√ÅCIE (neobmedzen√° veƒækos≈•):
/// var unlimitedLogger = LoggerAPI.CreateFileLogger(
///     externalLogger: null,           // ≈Ωiadny external logger - ≈æiadny probl√©m
///     logDirectory: @"C:\Temp\Logs",
///     baseFileName: "UnlimitedApp",
///     maxFileSizeMB: null);          // null = neobmedzen√° veƒækos≈•
/// 
/// // üìã POU≈ΩITIE VYTVOREN√ùCH LOGGEROV (≈°tandardn√Ω ILogger interface):
/// // Podporuje LoggerExtensions z Core.Extensions:
/// fileLogger.Info("üöÄ Application started");
/// fileLogger.Warning("‚ö†Ô∏è Configuration issue detected");
/// fileLogger.Error(exception, "üö® Operation failed: {Operation}", operationName);
/// 
/// // Alebo ≈°tandardn√© Microsoft.Extensions.Logging met√≥dy:
/// fileLogger.LogInformation("Standard info message");
/// fileLogger.LogError(exception, "Standard error message");
/// 
/// üîí FAIL-SAFE FEATURES:
/// - ExternalLogger m√¥≈æe by≈• null - ≈æiadny crash, len sa nezaloguje do extern√©ho syst√©mu
/// - Ak sa ned√° vytvori≈• s√∫bor, internal error sa zaloguje do externalLogger (ak existuje)
/// - Ak adres√°r neexistuje, pok√∫si sa ho vytvori≈•
/// - Thread-safe oper√°cie pre concurrent aplik√°cie
/// - Automatic disposal resources pre proper cleanup
/// </summary>
public static class LoggerAPI
{
    /// <summary>
    /// üéØ JEDIN√Å API MET√ìDA - Create professional file logger with automatic rotation and size management
    /// 
    /// üìã DETAILN√ù POPIS FUNKCIONALITY:
    /// T√°to met√≥da vytvor√≠ ILogger in≈°tanciu ktor√° zapisuje v≈°etky logy do s√∫borov na disku.
    /// Podporuje automatick√∫ rot√°ciu s√∫borov keƒè dosiahnu definovan√∫ veƒækos≈•.
    /// Je thread-safe a optimalizovan√° pre high-performance scen√°re.
    /// 
    /// üìÅ FILE MANAGEMENT SYSTEM:
    /// Ak maxFileSizeMB nie je null (rot√°cia zapnut√°):
    /// - MyApp.log          (aktu√°lny akt√≠vny log s√∫bor)
    /// - MyApp_1.log        (prv√Ω rotovan√Ω s√∫bor po dosiahnut√≠ 10MB limitu)
    /// - MyApp_2.log        (druh√Ω rotovan√Ω s√∫bor)
    /// - MyApp_3.log        (pokraƒçuje podƒæa potreby...)
    /// 
    /// Ak maxFileSizeMB je null (rot√°cia vypnut√°):
    /// - MyApp.log          (rastie neobmedzene, ≈æiadna rot√°cia)
    /// 
    /// üîÑ ROTATION PROCESS (ak je zapnut√°):
    /// 1. Logger p√≠s≈æe do MyApp.log dok√Ωm nedosiahne maxFileSizeMB limit
    /// 2. Keƒè sa limit dosiahne:
    ///    a) Aktu√°lny MyApp.log sa uzavrie a flush-ne na disk
    ///    b) Existuj√∫ce rotovan√© s√∫bory sa preƒç√≠sluj√∫: MyApp_1.log ‚Üí MyApp_2.log, atƒè.
    ///    c) MyApp.log sa premenuje na MyApp_1.log
    ///    d) Vytvor√≠ sa nov√Ω pr√°zdny MyApp.log pre pokraƒçovanie logovania
    /// 3. Proces pokraƒçuje transparentne bez straty logov
    /// 
    /// üí° VSTUPN√â PARAMETRE - DETAILN√ù POPIS:
    /// 
    /// externalLogger (ILogger? - nullable):
    /// - Voliteƒæn√Ω extern√≠ logger pre internal operations logging
    /// - Ak je null: ≈æiadne internal logy sa nezap√≠≈°u, ale FileLogger funguje norm√°lne
    /// - Ak je poskytnut√Ω: internal oper√°cie sa loguj√∫ (startup, rotation, errors)
    /// - FAIL-SAFE: ak external logger crashne, FileLogger pokraƒçuje v pr√°ci
    /// - Pr√≠klady pou≈æitia: console logger, existing app logger, testing logger
    /// 
    /// logDirectory (string - povinn√Ω):
    /// - Absol√∫tna cesta k adres√°ru kde sa maj√∫ uklada≈• log s√∫bory
    /// - Pr√≠klady: @"C:\MyApp\Logs", @"D:\ApplicationData\Logs\MyModule"
    /// - Ak adres√°r neexistuje: automaticky sa vytvor√≠ (vr√°tane parent directories)
    /// - Ak sa ned√° vytvori≈•: vyhod√≠ sa DirectoryNotFoundException s detailn√Ωm popisom
    /// - Po≈æadovan√© permissions: Write access pre vytvorenie s√∫borov a podadres√°rov
    /// 
    /// baseFileName (string - povinn√Ω):
    /// - Z√°kladn√© meno log s√∫boru BEZ pr√≠pony (automaticky sa prid√° .log)
    /// - Pr√≠klady: "MyApplication", "DataProcessor", "WebAPI"
    /// - Nepovoƒæuje: ≈°peci√°lne znaky (\/:*?"<>|), bude sanitizovan√Ω
    /// - V√Ωsledn√Ω s√∫bor: baseFileName + ".log" (napr. "MyApp.log")
    /// 
    /// maxFileSizeMB (int? - nullable):
    /// - Maximum veƒækos≈• s√∫boru v megabajtoch pred spusten√≠m rot√°cie
    /// - null = ≈æiadna rot√°cia, s√∫bor rastie neobmedzene (USE WITH CAUTION!)
    /// - 1-1000 = praktick√© hodnoty pre production (1MB-1GB range)
    /// - Typick√© hodnoty: 5MB (development), 50MB (production), 100MB+ (high-volume)
    /// - Kontrola sa vykon√°va po ka≈ædom log entry batch-u
    /// 
    /// üéØ V√ùSTUPN√â D√ÅTA - RETURN VALUE:
    /// 
    /// Vracia: ILogger implementation (FileLoggerService)
    /// - Implementuje pln√Ω Microsoft.Extensions.Logging.ILogger interface
    /// - Podporuje LoggerExtensions z Core.Extensions (.Info(), .Warning(), .Error())
    /// - Podporuje structured logging s parametrami
    /// - Thread-safe pre concurrent pou≈æitie
    /// - Implementuje IDisposable pre proper cleanup
    /// - Automatically flush-uje d√°ta na disk pre data integrity
    /// 
    /// üöÄ PERFORMANCE CHARACTERISTICS:
    /// - Async write operations - neblokuje calling thread
    /// - Batch writing - multiple log entries sa zapisuj√∫ naraz
    /// - Memory buffering - zni≈æuje disk I/O overhead
    /// - Lock-free reads - log queries poƒças write operations
    /// - Optimalized for high-volume scenarios (thousands of logs per second)
    /// 
    /// üîí ERROR HANDLING A FAIL-SAFE BEHAVIOR:
    /// - Ak logDirectory neexistuje: pok√∫si sa vytvori≈•, ak sa nepodar√≠ ‚Üí exception
    /// - Ak sa ned√° vytvori≈• s√∫bor: loguje do externalLogger (ak existuje) a vyhod√≠ exception  
    /// - Ak sa ned√° zap√≠sa≈• do s√∫boru: pok√∫si sa retry 3x, potom loguje warning
    /// - Ak externalLogger crashne: FileLogger pokraƒçuje norm√°lne (isolated failure)
    /// - Thread safety: multiple threads m√¥≈æu simult√°nne logova≈• bez corruption
    /// 
    /// üìä USAGE EXAMPLES - REAL WORLD SCENARIOS:
    /// 
    /// // üè¢ ENTERPRISE APPLICATION - s rot√°ciou a external logging:
    /// var appLogger = serviceProvider.GetService<ILogger<MyApp>>();
    /// var fileLogger = LoggerAPI.CreateFileLogger(
    ///     externalLogger: appLogger,      // Internal operations sa loguj√∫ do app logger
    ///     logDirectory: @"C:\ProgramData\MyCompany\MyApp\Logs",
    ///     baseFileName: "MyApp",          // Vytvor√≠ MyApp.log, MyApp_1.log, atƒè.
    ///     maxFileSizeMB: 50);            // 50MB rotation limit
    /// 
    /// // üî¨ DEVELOPMENT/TESTING - jednoduch√Ω file logging:
    /// var devLogger = LoggerAPI.CreateFileLogger(
    ///     externalLogger: null,           // ≈Ωiadne internal logy
    ///     logDirectory: Path.GetTempPath(), // Temp folder
    ///     baseFileName: "DevTest",        // DevTest.log
    ///     maxFileSizeMB: 5);             // Mal√© s√∫bory pre testing
    /// 
    /// // üìà HIGH-VOLUME SYSTEM - veƒæk√© s√∫bory bez ƒçastej rot√°cie:
    /// var highVolumeLogger = LoggerAPI.CreateFileLogger(
    ///     externalLogger: systemLogger,
    ///     logDirectory: @"D:\HighVolumeLogs",
    ///     baseFileName: "TransactionLog",
    ///     maxFileSizeMB: 500);           // 500MB pred rot√°ciou
    /// 
    /// // üìú AUDIT LOGGING - neobmedzen√° veƒækos≈• (compliance requirements):
    /// var auditLogger = LoggerAPI.CreateFileLogger(
    ///     externalLogger: complianceLogger,
    ///     logDirectory: @"C:\AuditLogs",
    ///     baseFileName: "ComplianceAudit",
    ///     maxFileSizeMB: null);          // ≈Ωiadna rot√°cia - rastie neobmedzene
    /// 
    /// // üéÆ POU≈ΩITIE VYTVOREN√ùCH LOGGEROV:
    /// fileLogger.Info("üöÄ Application started at {StartTime}", DateTime.Now);
    /// fileLogger.Warning("‚ö†Ô∏è Configuration fallback used for {Setting}", settingName);
    /// fileLogger.Error(exception, "üö® Critical operation failed: {Operation}", operationName);
    /// </summary>
    /// <param name="externalLogger">
    /// Voliteƒæn√Ω extern√≠ logger pre internal operations logging.
    /// Ak je null, ≈æiadne internal logy sa nezapisuj√∫ ale FileLogger funguje norm√°lne.
    /// Ak je poskytnut√Ω, internal oper√°cie (startup, rotation, errors) sa loguj√∫.
    /// FAIL-SAFE: ak external logger fail-ne, FileLogger pokraƒçuje v pr√°ci.
    /// </param>
    /// <param name="logDirectory">
    /// Absol√∫tna cesta k adres√°ru pre log s√∫bory. Mus√≠ by≈• valid path.
    /// Ak neexistuje, automaticky sa vytvor√≠. Vy≈æaduje write permissions.
    /// Pr√≠klady: @"C:\MyApp\Logs", @"D:\ApplicationData\Logs\MyModule"
    /// </param>
    /// <param name="baseFileName">
    /// Z√°kladn√© meno log s√∫boru BEZ pr√≠pony (.log sa prid√° automaticky).
    /// ≈†peci√°lne znaky bud√∫ sanitizovan√©. Pr√≠klady: "MyApp", "DataProcessor"
    /// </param>
    /// <param name="maxFileSizeMB">
    /// Maximum veƒækos≈• s√∫boru v MB pred rot√°ciou. null = ≈æiadna rot√°cia.
    /// Typick√© hodnoty: 5MB (dev), 50MB (production), 100MB+ (high-volume).
    /// null znamen√° s√∫bor rastie neobmedzene - USE WITH CAUTION!
    /// </param>
    /// <returns>
    /// ILogger implementation optimalizovan√° pre file logging.
    /// Podporuje ≈°tandardn√Ω Microsoft.Extensions.Logging interface + LoggerExtensions.
    /// Thread-safe, high-performance, s automatic resource cleanup.
    /// </returns>
    /// <exception cref="ArgumentException">Ak logDirectory alebo baseFileName s√∫ invalid</exception>
    /// <exception cref="DirectoryNotFoundException">Ak sa ned√° vytvori≈• logDirectory</exception>
    /// <exception cref="UnauthorizedAccessException">Ak nie s√∫ write permissions</exception>
    public static ILogger CreateFileLogger(
        ILogger? externalLogger,
        string logDirectory,
        string baseFileName,
        int? maxFileSizeMB)
    {
        // üìä PHASE 1: INPUT VALIDATION AND PARAMETER ANALYSIS
        // Validujeme v≈°etky vstupn√© parametre pred vytvoren√≠m FileLogger in≈°tancie.
        // Logujeme proces vytvorenia pre audit trail a troubleshooting.
        externalLogger?.Info("üìÅ LoggerAPI: CREATION START - Creating file logger with parameters: " +
            "Directory='{Directory}', BaseFileName='{BaseFileName}', MaxSizeMB={MaxSize}", 
            logDirectory, baseFileName, maxFileSizeMB?.ToString() ?? "unlimited");
        
        // Valid√°cia logDirectory - mus√≠ by≈• non-null a non-empty
        if (string.IsNullOrWhiteSpace(logDirectory))
        {
            const string error = "LogDirectory cannot be null or empty";
            externalLogger?.Error("‚ùå LoggerAPI: VALIDATION FAILED - {Error}", error);
            throw new ArgumentException(error, nameof(logDirectory));
        }
        
        // Valid√°cia baseFileName - mus√≠ by≈• valid pre file system
        if (string.IsNullOrWhiteSpace(baseFileName))
        {
            const string error = "BaseFileName cannot be null or empty";
            externalLogger?.Error("‚ùå LoggerAPI: VALIDATION FAILED - {Error}", error);
            throw new ArgumentException(error, nameof(baseFileName));
        }
        
        // Boundary check pre maxFileSizeMB - ak nie je null, mus√≠ by≈• > 0
        if (maxFileSizeMB.HasValue && maxFileSizeMB.Value <= 0)
        {
            const string error = "MaxFileSizeMB must be greater than 0 if specified";
            externalLogger?.Error("‚ùå LoggerAPI: VALIDATION FAILED - {Error}, provided value: {Value}", 
                error, maxFileSizeMB.Value);
            throw new ArgumentException(error, nameof(maxFileSizeMB));
        }
        
        try 
        {
            // üìä PHASE 2: CONFIGURATION OBJECT CREATION
            // Vytv√°rame LoggerConfiguration objekt s validovan√Ωmi parametrami.
            // Mapujeme public API parametre na internal configuration ≈°trukt√∫ru.
            // Create internal LoggerConfiguration from LoggerOptions
            var config = new Internal.Core.Models.LoggerConfiguration
            {
                LogDirectory = logDirectory.Trim(),                    // Cleanup whitespace
                BaseFileName = baseFileName.Trim(),                   // Cleanup whitespace
                MaxFileSizeMB = maxFileSizeMB,                        // Can be null
                MaxLogFiles = 50,                                     // Reasonable retention limit
                EnableAutoRotation = maxFileSizeMB.HasValue,          // Auto-determine rotation
                EnableRealTimeViewing = false,                        // File-only mode
                MinLogLevel = (Microsoft.Extensions.Logging.LogLevel)Internal.Configuration.LogLevel.Information     // Standard minimum level
            };
            
            externalLogger?.Info("üìã LoggerAPI: CONFIG CREATED - Configuration prepared: " +
                "Directory={Directory}, BaseFileName={BaseFileName}, MaxFileSizeMB={MaxFileSizeMB}, MaxLogFiles={MaxLogFiles}", 
                config.LogDirectory, config.BaseFileName, config.MaxFileSizeMB, config.MaxLogFiles);
            
            // üìä PHASE 3: FILE LOGGER SERVICE INSTANTIATION
            // Vytv√°rame actual FileLoggerService in≈°tanciu s prepared configuration.
            // Constructor m√¥≈æe vyhodi≈• v√Ωnimky ak s√∫ probl√©my s file system operations.
            var fileLogger = new Internal.Infrastructure.Services.FileLoggerService(config, externalLogger);
            
            // üìä PHASE 4: SUCCESS CONFIRMATION AND RETURN
            // Potvrdenie √∫spe≈°n√©ho vytvorenia pre audit trail.
            // Vraciame ILogger interface pre clean API abstraction.
            externalLogger?.Info("‚úÖ LoggerAPI: CREATION SUCCESS - File logger created successfully, " +
                "ready for logging operations");
            
            return fileLogger;
        }
        catch (DirectoryNotFoundException ex)
        {
            // üö® DIRECTORY CREATION FAILURE
            // LogDirectory neexistuje a nepodarilo sa ho vytvori≈•
            externalLogger?.Error(ex, "üö® LoggerAPI: DIRECTORY ERROR - Cannot create or access log directory: " +
                "'{Directory}'. Check permissions and path validity.", logDirectory);
            throw; // Re-throw pre caller handling
        }
        catch (UnauthorizedAccessException ex)
        {
            // üö® PERMISSIONS FAILURE
            // Nem√°me write permissions pre specified directory
            externalLogger?.Error(ex, "üö® LoggerAPI: PERMISSIONS ERROR - Insufficient permissions for log directory: " +
                "'{Directory}'. Application needs write access.", logDirectory);
            throw; // Re-throw pre caller handling
        }
        catch (Exception ex)
        {
            // üö® UNEXPECTED CRITICAL ERROR
            // Ak√°koƒævek in√° neoƒçak√°van√° chyba poƒças vytvorenia loggera
            externalLogger?.Error(ex, "üö® LoggerAPI: CRITICAL CREATION ERROR - Unexpected exception during file logger creation. " +
                "Directory='{Directory}', BaseFileName='{BaseFileName}', MaxSizeMB={MaxSize}", 
                logDirectory, baseFileName, maxFileSizeMB);
            throw; // Re-throw - caller must handle critical failures
        }
    }

    /// <summary>
    /// üéØ CLEAN API FILE LOGGER CREATION - Modern configuration-based API
    /// 
    /// üîß MODERN API PATTERN:
    /// T√°to met√≥da predstavuje modern approach k vytvoreniu file loggera pomocou konfiguraƒçn√©ho
    /// objektu LoggerOptions. Poskytuje lep≈°√≠ IntelliSense support, type safety a extensibility
    /// pre bud√∫ce features bez breaking changes v API signature.
    /// 
    /// üìã CONFIGURATION-DRIVEN DESIGN:
    /// - LoggerOptions objekt obsahuje v≈°etky nastavenia
    /// - Predefined options pre common scenarios (Default, Development, HighVolume)
    /// - Selective customization - iba zmeni≈• potrebn√© properties
    /// - Future-proof - nov√© features m√¥≈æu by≈• pridan√© bez API changes
    /// 
    /// üí° USAGE PATTERNS:
    /// 
    /// // PREDEFINED OPTIONS:
    /// var logger = LoggerAPI.CreateFileLogger(LoggerOptions.Default);
    /// var devLogger = LoggerAPI.CreateFileLogger(LoggerOptions.Development);
    /// 
    /// // CUSTOM OPTIONS:
    /// var options = new LoggerOptions 
    /// { 
    ///     LogDirectory = @"C:\MyApp\Logs",
    ///     BaseFileName = "application",
    ///     MaxFileSizeMB = 25
    /// };
    /// var logger = LoggerAPI.CreateFileLogger(options);
    /// 
    /// // SELECTIVE CUSTOMIZATION:
    /// var options = LoggerOptions.Default;
    /// options.LogDirectory = myLogPath;
    /// options.MaxFileSizeMB = 50;
    /// var logger = LoggerAPI.CreateFileLogger(options);
    /// 
    /// üîÑ DELEGATION TO LEGACY API:
    /// T√°to met√≥da internally deleguje na existuj√∫cu CreateFileLogger() method
    /// pre zachovanie behavior consistency a code reuse. Legacy API zost√°va
    /// available pre backward compatibility.
    /// </summary>
    /// <param name="options">
    /// LoggerOptions objekt s complete configuration pre file logger.
    /// Obsahuje LogDirectory (POVINN√ù), BaseFileName, file rotation settings,
    /// naming options a v≈°etky ƒèal≈°ie logger parameters.
    /// </param>
    /// <returns>
    /// ILogger implementation optimalizovan√° pre file logging.
    /// Identick√Ω behavior ako legacy API ale s modern configuration approach.
    /// Thread-safe, high-performance, s automatic resource cleanup.
    /// </returns>
    /// <exception cref="ArgumentNullException">Ak options parameter je null</exception>
    /// <exception cref="ArgumentException">Ak LogDirectory v options je null alebo empty</exception>
    /// <exception cref="DirectoryNotFoundException">Ak sa ned√° vytvori≈• log directory</exception>
    /// <exception cref="UnauthorizedAccessException">Ak nie s√∫ write permissions</exception>
    public static ILogger CreateFileLogger(LoggerOptions options)
    {
        // üìä PHASE 1: OPTIONS VALIDATION
        // Validujeme configuration object pred deleg√°ciou na legacy API
        if (options == null)
        {
            const string error = "LoggerOptions cannot be null";
            throw new ArgumentNullException(nameof(options), error);
        }

        // üìã PHASE 2: PARAMETER EXTRACTION AND DELEGATION
        // Extrahujeme parameters z LoggerOptions a delegujeme na proven legacy API
        // Toto zabezpeƒçuje behavior consistency medzi both APIs
        
        // Convert MaxFileSizeBytes to MaxFileSizeMB for legacy API compatibility
        int? maxSizeMB = options.MaxFileSizeBytes > 0 ? (int)(options.MaxFileSizeBytes / (1024 * 1024)) : null;

        // Delegate to existing proven implementation with default values
        // External logger je null lebo t√°to overload nem√° external logger parameter
        // Pre external logger support by aplik√°cia mala pou≈æi≈• first overload
        return CreateFileLogger(
            externalLogger: null,
            logDirectory: options.LogDirectory,
            baseFileName: options.BaseFileName,
            maxFileSizeMB: maxSizeMB
        );
    }

    /// <summary>
    /// üéØ CLEAN API FILE LOGGER WITH EXTERNAL LOGGER - Configuration-based s logging support
    /// 
    /// üîß ENHANCED CONFIGURATION API:
    /// Combination of modern LoggerOptions configuration s external logger support.
    /// Poskytuje both configuration convenience a external logging capability
    /// pre complex scenarios kde potrebujeme chain loggers.
    /// 
    /// üí° USAGE SCENARIOS:
    /// 
    /// // S EXTERNAL LOGGER PRE AUDIT TRAIL:
    /// var mainLogger = // z√≠skan√Ω z DI container
    /// var options = LoggerOptions.Default;
    /// options.LogDirectory = @"C:\AppLogs";
    /// var fileLogger = LoggerAPI.CreateFileLogger(mainLogger, options);
    /// 
    /// // DEVELOPMENT S DEBUG LOGGING:
    /// var debugLogger = // console alebo debug logger
    /// var devOptions = LoggerOptions.Development;
    /// var fileLogger = LoggerAPI.CreateFileLogger(debugLogger, devOptions);
    /// </summary>
    /// <param name="externalLogger">
    /// Optional external logger pre logging creation process a chaining.
    /// null = ≈æiadne external logging (silent creation).
    /// </param>
    /// <param name="options">
    /// LoggerOptions objekt s complete configuration.
    /// V≈°etky same properties ako single-parameter overload.
    /// </param>
    /// <returns>
    /// ILogger implementation s same capabilities ako other overloads.
    /// </returns>
    /// <exception cref="ArgumentNullException">Ak options parameter je null</exception>
    /// <exception cref="ArgumentException">Ak LogDirectory v options je null alebo empty</exception>
    /// <exception cref="DirectoryNotFoundException">Ak sa ned√° vytvori≈• log directory</exception>
    /// <exception cref="UnauthorizedAccessException">Ak nie s√∫ write permissions</exception>
    public static ILogger CreateFileLogger(ILogger? externalLogger, LoggerOptions options)
    {
        // üìä VALIDATION PHASE
        if (options == null)
        {
            const string error = "LoggerOptions cannot be null";
            externalLogger?.Error("‚ùå LoggerAPI: VALIDATION FAILED - {Error}", error);
            throw new ArgumentNullException(nameof(options), error);
        }

        // üìã DELEGATION PHASE
        // Convert options to individual parameters a delegate to proven implementation
        int? maxSizeMB = options.MaxFileSizeBytes > 0 ? (int)(options.MaxFileSizeBytes / (1024 * 1024)) : null;

        return CreateFileLogger(
            externalLogger: externalLogger,
            logDirectory: options.LogDirectory,
            baseFileName: options.BaseFileName,
            maxFileSizeMB: maxSizeMB
        );
    }

    #region Internal Mapping Methods

    /// <summary>
    /// INTERNAL: Maps public LoggerOptions to internal LoggerOptions
    /// CLEAN ARCHITECTURE: Protects internal types from external exposure
    /// </summary>
    private static Internal.Configuration.LoggerOptions MapToInternal(LoggerOptions publicOptions)
    {
        return new Internal.Configuration.LoggerOptions
        {
            LogDirectory = publicOptions.LogDirectory,
            BaseFileName = publicOptions.BaseFileName,
            MaxFileSizeBytes = publicOptions.MaxFileSizeBytes,
            MaxFileSizeMB = publicOptions.MaxFileSizeBytes > 0 ? (int)(publicOptions.MaxFileSizeBytes / (1024 * 1024)) : 100,
            MaxFileCount = publicOptions.MaxFileCount,
            MaxLogFiles = publicOptions.MaxFileCount,
            EnableAutoRotation = publicOptions.EnableAutoRotation,
            EnableBackgroundLogging = publicOptions.EnableBackgroundLogging,
            EnablePerformanceMonitoring = publicOptions.EnablePerformanceMonitoring,
            DateFormat = publicOptions.DateFormat,
            EnableRealTimeViewing = false,
            EnableStructuredLogging = true,
            MinLogLevel = Internal.Configuration.LogLevel.Information,
            BufferSize = 1000,
            FlushInterval = TimeSpan.FromSeconds(5)
        };
    }

    #endregion
}

#region Public Result Types - Clean API

/// <summary>
/// Public API: Generic result wrapper for Logger operations
/// SENIOR DEVELOPER: Clean Result pattern for professional error handling
/// </summary>
public sealed class LoggerResult
{
    public bool IsSuccess { get; init; }
    public string? ErrorMessage { get; init; }
    
    public static LoggerResult Success() => new() { IsSuccess = true };
    public static LoggerResult Failure(string error) => new() { IsSuccess = false, ErrorMessage = error };
}

/// <summary>
/// Public API: Generic result wrapper with value for Logger operations
/// SENIOR DEVELOPER: Clean Result pattern with typed return values
/// </summary>
public sealed class LoggerResult<T>
{
    public bool IsSuccess { get; init; }
    public string? ErrorMessage { get; init; }
    public T? Value { get; init; }
    
    public static LoggerResult<T> Success(T value) => new() { IsSuccess = true, Value = value };
    public static LoggerResult<T> Failure(string error) => new() { IsSuccess = false, ErrorMessage = error };
}

#endregion